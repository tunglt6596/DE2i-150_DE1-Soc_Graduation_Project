--lpm_mux CASCADE_CHAIN="MANUAL" DEVICE_FAMILY="Cyclone IV GX" IGNORE_CASCADE_BUFFERS="OFF" LPM_PIPELINE=1 LPM_SIZE=2 LPM_WIDTH=32 LPM_WIDTHS=1 aclr clken clock data result sel
--VERSION_BEGIN 17.1 cbx_lpm_mux 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = reg 32 
SUBDESIGN mux_stf
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	data[63..0]	:	input;
	result[31..0]	:	output;
	sel[0..0]	:	input;
) 
VARIABLE 
	external_latency_ffsa[31..0] : dffe;
	result_node[31..0]	: WIRE;
	sel_node[0..0]	: WIRE;
	w_data105w[1..0]	: WIRE;
	w_data117w[1..0]	: WIRE;
	w_data129w[1..0]	: WIRE;
	w_data141w[1..0]	: WIRE;
	w_data153w[1..0]	: WIRE;
	w_data165w[1..0]	: WIRE;
	w_data177w[1..0]	: WIRE;
	w_data189w[1..0]	: WIRE;
	w_data201w[1..0]	: WIRE;
	w_data213w[1..0]	: WIRE;
	w_data21w[1..0]	: WIRE;
	w_data225w[1..0]	: WIRE;
	w_data237w[1..0]	: WIRE;
	w_data249w[1..0]	: WIRE;
	w_data261w[1..0]	: WIRE;
	w_data273w[1..0]	: WIRE;
	w_data285w[1..0]	: WIRE;
	w_data297w[1..0]	: WIRE;
	w_data309w[1..0]	: WIRE;
	w_data321w[1..0]	: WIRE;
	w_data333w[1..0]	: WIRE;
	w_data33w[1..0]	: WIRE;
	w_data345w[1..0]	: WIRE;
	w_data357w[1..0]	: WIRE;
	w_data369w[1..0]	: WIRE;
	w_data381w[1..0]	: WIRE;
	w_data45w[1..0]	: WIRE;
	w_data57w[1..0]	: WIRE;
	w_data69w[1..0]	: WIRE;
	w_data7w[1..0]	: WIRE;
	w_data81w[1..0]	: WIRE;
	w_data93w[1..0]	: WIRE;

BEGIN 
	external_latency_ffsa[].clk = clock;
	external_latency_ffsa[].clrn = (! aclr);
	external_latency_ffsa[].d = ( result_node[]);
	external_latency_ffsa[].ena = clken;
	result[31..0] = external_latency_ffsa[31..0].q;
	result_node[] = ( ((sel_node[] & w_data381w[1..1]) # ((! sel_node[]) & w_data381w[0..0])), ((sel_node[] & w_data369w[1..1]) # ((! sel_node[]) & w_data369w[0..0])), ((sel_node[] & w_data357w[1..1]) # ((! sel_node[]) & w_data357w[0..0])), ((sel_node[] & w_data345w[1..1]) # ((! sel_node[]) & w_data345w[0..0])), ((sel_node[] & w_data333w[1..1]) # ((! sel_node[]) & w_data333w[0..0])), ((sel_node[] & w_data321w[1..1]) # ((! sel_node[]) & w_data321w[0..0])), ((sel_node[] & w_data309w[1..1]) # ((! sel_node[]) & w_data309w[0..0])), ((sel_node[] & w_data297w[1..1]) # ((! sel_node[]) & w_data297w[0..0])), ((sel_node[] & w_data285w[1..1]) # ((! sel_node[]) & w_data285w[0..0])), ((sel_node[] & w_data273w[1..1]) # ((! sel_node[]) & w_data273w[0..0])), ((sel_node[] & w_data261w[1..1]) # ((! sel_node[]) & w_data261w[0..0])), ((sel_node[] & w_data249w[1..1]) # ((! sel_node[]) & w_data249w[0..0])), ((sel_node[] & w_data237w[1..1]) # ((! sel_node[]) & w_data237w[0..0])), ((sel_node[] & w_data225w[1..1]) # ((! sel_node[]) & w_data225w[0..0])), ((sel_node[] & w_data213w[1..1]) # ((! sel_node[]) & w_data213w[0..0])), ((sel_node[] & w_data201w[1..1]) # ((! sel_node[]) & w_data201w[0..0])), ((sel_node[] & w_data189w[1..1]) # ((! sel_node[]) & w_data189w[0..0])), ((sel_node[] & w_data177w[1..1]) # ((! sel_node[]) & w_data177w[0..0])), ((sel_node[] & w_data165w[1..1]) # ((! sel_node[]) & w_data165w[0..0])), ((sel_node[] & w_data153w[1..1]) # ((! sel_node[]) & w_data153w[0..0])), ((sel_node[] & w_data141w[1..1]) # ((! sel_node[]) & w_data141w[0..0])), ((sel_node[] & w_data129w[1..1]) # ((! sel_node[]) & w_data129w[0..0])), ((sel_node[] & w_data117w[1..1]) # ((! sel_node[]) & w_data117w[0..0])), ((sel_node[] & w_data105w[1..1]) # ((! sel_node[]) & w_data105w[0..0])), ((sel_node[] & w_data93w[1..1]) # ((! sel_node[]) & w_data93w[0..0])), ((sel_node[] & w_data81w[1..1]) # ((! sel_node[]) & w_data81w[0..0])), ((sel_node[] & w_data69w[1..1]) # ((! sel_node[]) & w_data69w[0..0])), ((sel_node[] & w_data57w[1..1]) # ((! sel_node[]) & w_data57w[0..0])), ((sel_node[] & w_data45w[1..1]) # ((! sel_node[]) & w_data45w[0..0])), ((sel_node[] & w_data33w[1..1]) # ((! sel_node[]) & w_data33w[0..0])), ((sel_node[] & w_data21w[1..1]) # ((! sel_node[]) & w_data21w[0..0])), ((sel_node[] & w_data7w[1..1]) # ((! sel_node[]) & w_data7w[0..0])));
	sel_node[] = ( sel[0..0]);
	w_data105w[] = ( data[40..40], data[8..8]);
	w_data117w[] = ( data[41..41], data[9..9]);
	w_data129w[] = ( data[42..42], data[10..10]);
	w_data141w[] = ( data[43..43], data[11..11]);
	w_data153w[] = ( data[44..44], data[12..12]);
	w_data165w[] = ( data[45..45], data[13..13]);
	w_data177w[] = ( data[46..46], data[14..14]);
	w_data189w[] = ( data[47..47], data[15..15]);
	w_data201w[] = ( data[48..48], data[16..16]);
	w_data213w[] = ( data[49..49], data[17..17]);
	w_data21w[] = ( data[33..33], data[1..1]);
	w_data225w[] = ( data[50..50], data[18..18]);
	w_data237w[] = ( data[51..51], data[19..19]);
	w_data249w[] = ( data[52..52], data[20..20]);
	w_data261w[] = ( data[53..53], data[21..21]);
	w_data273w[] = ( data[54..54], data[22..22]);
	w_data285w[] = ( data[55..55], data[23..23]);
	w_data297w[] = ( data[56..56], data[24..24]);
	w_data309w[] = ( data[57..57], data[25..25]);
	w_data321w[] = ( data[58..58], data[26..26]);
	w_data333w[] = ( data[59..59], data[27..27]);
	w_data33w[] = ( data[34..34], data[2..2]);
	w_data345w[] = ( data[60..60], data[28..28]);
	w_data357w[] = ( data[61..61], data[29..29]);
	w_data369w[] = ( data[62..62], data[30..30]);
	w_data381w[] = ( data[63..63], data[31..31]);
	w_data45w[] = ( data[35..35], data[3..3]);
	w_data57w[] = ( data[36..36], data[4..4]);
	w_data69w[] = ( data[37..37], data[5..5]);
	w_data7w[] = ( data[32..32], data[0..0]);
	w_data81w[] = ( data[38..38], data[6..6]);
	w_data93w[] = ( data[39..39], data[7..7]);
END;
--VALID FILE
