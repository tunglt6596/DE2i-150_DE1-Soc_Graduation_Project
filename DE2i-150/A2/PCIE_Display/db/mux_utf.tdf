--lpm_mux CASCADE_CHAIN="MANUAL" DEVICE_FAMILY="Cyclone IV GX" IGNORE_CASCADE_BUFFERS="OFF" LPM_PIPELINE=1 LPM_SIZE=2 LPM_WIDTH=16 LPM_WIDTHS=1 aclr clken clock data result sel
--VERSION_BEGIN 17.1 cbx_lpm_mux 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = reg 16 
SUBDESIGN mux_utf
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	data[31..0]	:	input;
	result[15..0]	:	output;
	sel[0..0]	:	input;
) 
VARIABLE 
	external_latency_ffsa[15..0] : dffe;
	result_node[15..0]	: WIRE;
	sel_node[0..0]	: WIRE;
	w_data105w[1..0]	: WIRE;
	w_data117w[1..0]	: WIRE;
	w_data129w[1..0]	: WIRE;
	w_data141w[1..0]	: WIRE;
	w_data153w[1..0]	: WIRE;
	w_data165w[1..0]	: WIRE;
	w_data177w[1..0]	: WIRE;
	w_data189w[1..0]	: WIRE;
	w_data21w[1..0]	: WIRE;
	w_data33w[1..0]	: WIRE;
	w_data45w[1..0]	: WIRE;
	w_data57w[1..0]	: WIRE;
	w_data69w[1..0]	: WIRE;
	w_data7w[1..0]	: WIRE;
	w_data81w[1..0]	: WIRE;
	w_data93w[1..0]	: WIRE;

BEGIN 
	external_latency_ffsa[].clk = clock;
	external_latency_ffsa[].clrn = (! aclr);
	external_latency_ffsa[].d = ( result_node[]);
	external_latency_ffsa[].ena = clken;
	result[15..0] = external_latency_ffsa[15..0].q;
	result_node[] = ( ((sel_node[] & w_data189w[1..1]) # ((! sel_node[]) & w_data189w[0..0])), ((sel_node[] & w_data177w[1..1]) # ((! sel_node[]) & w_data177w[0..0])), ((sel_node[] & w_data165w[1..1]) # ((! sel_node[]) & w_data165w[0..0])), ((sel_node[] & w_data153w[1..1]) # ((! sel_node[]) & w_data153w[0..0])), ((sel_node[] & w_data141w[1..1]) # ((! sel_node[]) & w_data141w[0..0])), ((sel_node[] & w_data129w[1..1]) # ((! sel_node[]) & w_data129w[0..0])), ((sel_node[] & w_data117w[1..1]) # ((! sel_node[]) & w_data117w[0..0])), ((sel_node[] & w_data105w[1..1]) # ((! sel_node[]) & w_data105w[0..0])), ((sel_node[] & w_data93w[1..1]) # ((! sel_node[]) & w_data93w[0..0])), ((sel_node[] & w_data81w[1..1]) # ((! sel_node[]) & w_data81w[0..0])), ((sel_node[] & w_data69w[1..1]) # ((! sel_node[]) & w_data69w[0..0])), ((sel_node[] & w_data57w[1..1]) # ((! sel_node[]) & w_data57w[0..0])), ((sel_node[] & w_data45w[1..1]) # ((! sel_node[]) & w_data45w[0..0])), ((sel_node[] & w_data33w[1..1]) # ((! sel_node[]) & w_data33w[0..0])), ((sel_node[] & w_data21w[1..1]) # ((! sel_node[]) & w_data21w[0..0])), ((sel_node[] & w_data7w[1..1]) # ((! sel_node[]) & w_data7w[0..0])));
	sel_node[] = ( sel[0..0]);
	w_data105w[] = ( data[24..24], data[8..8]);
	w_data117w[] = ( data[25..25], data[9..9]);
	w_data129w[] = ( data[26..26], data[10..10]);
	w_data141w[] = ( data[27..27], data[11..11]);
	w_data153w[] = ( data[28..28], data[12..12]);
	w_data165w[] = ( data[29..29], data[13..13]);
	w_data177w[] = ( data[30..30], data[14..14]);
	w_data189w[] = ( data[31..31], data[15..15]);
	w_data21w[] = ( data[17..17], data[1..1]);
	w_data33w[] = ( data[18..18], data[2..2]);
	w_data45w[] = ( data[19..19], data[3..3]);
	w_data57w[] = ( data[20..20], data[4..4]);
	w_data69w[] = ( data[21..21], data[5..5]);
	w_data7w[] = ( data[16..16], data[0..0]);
	w_data81w[] = ( data[22..22], data[6..6]);
	w_data93w[] = ( data[23..23], data[7..7]);
END;
--VALID FILE
