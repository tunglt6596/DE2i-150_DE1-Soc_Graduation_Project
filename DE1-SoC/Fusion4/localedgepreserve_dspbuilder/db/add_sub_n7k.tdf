--lpm_add_sub CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=40 ONE_INPUT_IS_CONSTANT="NO" aclr add_sub cin clken clock cout dataa datab result
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION cyclonev_lcell_comb (cin, dataa, datab, datac, datad, datae, dataf, datag, sharein)
WITH ( DONT_TOUCH, EXTENDED_LUT, LUT_MASK, SHARED_ARITH)
RETURNS ( combout, cout, shareout, sumout);

--synthesis_resources = lut 40 reg 41 
SUBDESIGN add_sub_n7k
( 
	aclr	:	input;
	add_sub	:	input;
	cin	:	input;
	clken	:	input;
	clock	:	input;
	cout	:	output;
	dataa[39..0]	:	input;
	datab[39..0]	:	input;
	result[39..0]	:	output;
) 
VARIABLE 
	dffe1 : dffe;
	dffe10 : dffe;
	dffe11 : dffe;
	dffe12 : dffe;
	dffe13 : dffe;
	dffe14 : dffe;
	dffe15 : dffe;
	dffe16 : dffe;
	dffe17 : dffe;
	dffe18 : dffe;
	dffe19 : dffe;
	dffe2 : dffe;
	dffe20 : dffe;
	dffe21 : dffe;
	dffe22 : dffe;
	dffe23 : dffe;
	dffe24 : dffe;
	dffe25 : dffe;
	dffe26 : dffe;
	dffe27 : dffe;
	dffe28 : dffe;
	dffe29 : dffe;
	dffe3 : dffe;
	dffe30 : dffe;
	dffe31 : dffe;
	dffe32 : dffe;
	dffe33 : dffe;
	dffe34 : dffe;
	dffe35 : dffe;
	dffe36 : dffe;
	dffe37 : dffe;
	dffe38 : dffe;
	dffe39 : dffe;
	dffe4 : dffe;
	dffe40 : dffe;
	dffe41a[0..0] : dffe;
	dffe5 : dffe;
	dffe6 : dffe;
	dffe7 : dffe;
	dffe8 : dffe;
	dffe9 : dffe;
	add_sub_cella[39..0] : cyclonev_lcell_comb
		WITH (
			EXTENDED_LUT = "off",
			LUT_MASK = "00000FF00000FF00",
			SHARED_ARITH = "off"
		);
	lsb_cin_wire[0..0]	: WIRE;

BEGIN 
	dffe1.clk = clock;
	dffe1.clrn = (! aclr);
	dffe1.d = add_sub_cella[0].sumout;
	dffe1.ena = clken;
	dffe10.clk = clock;
	dffe10.clrn = (! aclr);
	dffe10.d = add_sub_cella[9].sumout;
	dffe10.ena = clken;
	dffe11.clk = clock;
	dffe11.clrn = (! aclr);
	dffe11.d = add_sub_cella[10].sumout;
	dffe11.ena = clken;
	dffe12.clk = clock;
	dffe12.clrn = (! aclr);
	dffe12.d = add_sub_cella[11].sumout;
	dffe12.ena = clken;
	dffe13.clk = clock;
	dffe13.clrn = (! aclr);
	dffe13.d = add_sub_cella[12].sumout;
	dffe13.ena = clken;
	dffe14.clk = clock;
	dffe14.clrn = (! aclr);
	dffe14.d = add_sub_cella[13].sumout;
	dffe14.ena = clken;
	dffe15.clk = clock;
	dffe15.clrn = (! aclr);
	dffe15.d = add_sub_cella[14].sumout;
	dffe15.ena = clken;
	dffe16.clk = clock;
	dffe16.clrn = (! aclr);
	dffe16.d = add_sub_cella[15].sumout;
	dffe16.ena = clken;
	dffe17.clk = clock;
	dffe17.clrn = (! aclr);
	dffe17.d = add_sub_cella[16].sumout;
	dffe17.ena = clken;
	dffe18.clk = clock;
	dffe18.clrn = (! aclr);
	dffe18.d = add_sub_cella[17].sumout;
	dffe18.ena = clken;
	dffe19.clk = clock;
	dffe19.clrn = (! aclr);
	dffe19.d = add_sub_cella[18].sumout;
	dffe19.ena = clken;
	dffe2.clk = clock;
	dffe2.clrn = (! aclr);
	dffe2.d = add_sub_cella[1].sumout;
	dffe2.ena = clken;
	dffe20.clk = clock;
	dffe20.clrn = (! aclr);
	dffe20.d = add_sub_cella[19].sumout;
	dffe20.ena = clken;
	dffe21.clk = clock;
	dffe21.clrn = (! aclr);
	dffe21.d = add_sub_cella[20].sumout;
	dffe21.ena = clken;
	dffe22.clk = clock;
	dffe22.clrn = (! aclr);
	dffe22.d = add_sub_cella[21].sumout;
	dffe22.ena = clken;
	dffe23.clk = clock;
	dffe23.clrn = (! aclr);
	dffe23.d = add_sub_cella[22].sumout;
	dffe23.ena = clken;
	dffe24.clk = clock;
	dffe24.clrn = (! aclr);
	dffe24.d = add_sub_cella[23].sumout;
	dffe24.ena = clken;
	dffe25.clk = clock;
	dffe25.clrn = (! aclr);
	dffe25.d = add_sub_cella[24].sumout;
	dffe25.ena = clken;
	dffe26.clk = clock;
	dffe26.clrn = (! aclr);
	dffe26.d = add_sub_cella[25].sumout;
	dffe26.ena = clken;
	dffe27.clk = clock;
	dffe27.clrn = (! aclr);
	dffe27.d = add_sub_cella[26].sumout;
	dffe27.ena = clken;
	dffe28.clk = clock;
	dffe28.clrn = (! aclr);
	dffe28.d = add_sub_cella[27].sumout;
	dffe28.ena = clken;
	dffe29.clk = clock;
	dffe29.clrn = (! aclr);
	dffe29.d = add_sub_cella[28].sumout;
	dffe29.ena = clken;
	dffe3.clk = clock;
	dffe3.clrn = (! aclr);
	dffe3.d = add_sub_cella[2].sumout;
	dffe3.ena = clken;
	dffe30.clk = clock;
	dffe30.clrn = (! aclr);
	dffe30.d = add_sub_cella[29].sumout;
	dffe30.ena = clken;
	dffe31.clk = clock;
	dffe31.clrn = (! aclr);
	dffe31.d = add_sub_cella[30].sumout;
	dffe31.ena = clken;
	dffe32.clk = clock;
	dffe32.clrn = (! aclr);
	dffe32.d = add_sub_cella[31].sumout;
	dffe32.ena = clken;
	dffe33.clk = clock;
	dffe33.clrn = (! aclr);
	dffe33.d = add_sub_cella[32].sumout;
	dffe33.ena = clken;
	dffe34.clk = clock;
	dffe34.clrn = (! aclr);
	dffe34.d = add_sub_cella[33].sumout;
	dffe34.ena = clken;
	dffe35.clk = clock;
	dffe35.clrn = (! aclr);
	dffe35.d = add_sub_cella[34].sumout;
	dffe35.ena = clken;
	dffe36.clk = clock;
	dffe36.clrn = (! aclr);
	dffe36.d = add_sub_cella[35].sumout;
	dffe36.ena = clken;
	dffe37.clk = clock;
	dffe37.clrn = (! aclr);
	dffe37.d = add_sub_cella[36].sumout;
	dffe37.ena = clken;
	dffe38.clk = clock;
	dffe38.clrn = (! aclr);
	dffe38.d = add_sub_cella[37].sumout;
	dffe38.ena = clken;
	dffe39.clk = clock;
	dffe39.clrn = (! aclr);
	dffe39.d = add_sub_cella[38].sumout;
	dffe39.ena = clken;
	dffe4.clk = clock;
	dffe4.clrn = (! aclr);
	dffe4.d = add_sub_cella[3].sumout;
	dffe4.ena = clken;
	dffe40.clk = clock;
	dffe40.clrn = (! aclr);
	dffe40.d = add_sub_cella[39].sumout;
	dffe40.ena = clken;
	dffe41a[].clk = clock;
	dffe41a[].clrn = (! aclr);
	dffe41a[].d = add_sub_cella[39].cout;
	dffe41a[].ena = clken;
	dffe5.clk = clock;
	dffe5.clrn = (! aclr);
	dffe5.d = add_sub_cella[4].sumout;
	dffe5.ena = clken;
	dffe6.clk = clock;
	dffe6.clrn = (! aclr);
	dffe6.d = add_sub_cella[5].sumout;
	dffe6.ena = clken;
	dffe7.clk = clock;
	dffe7.clrn = (! aclr);
	dffe7.d = add_sub_cella[6].sumout;
	dffe7.ena = clken;
	dffe8.clk = clock;
	dffe8.clrn = (! aclr);
	dffe8.d = add_sub_cella[7].sumout;
	dffe8.ena = clken;
	dffe9.clk = clock;
	dffe9.clrn = (! aclr);
	dffe9.d = add_sub_cella[8].sumout;
	dffe9.ena = clken;
	add_sub_cella[].cin = ( add_sub_cella[38..0].cout, lsb_cin_wire[]);
	add_sub_cella[].datac = add_sub;
	add_sub_cella[].datad = dataa[];
	add_sub_cella[].dataf = datab[];
	cout = dffe41a[].q;
	lsb_cin_wire[] = cin;
	result[] = ( dffe40.q, dffe39.q, dffe38.q, dffe37.q, dffe36.q, dffe35.q, dffe34.q, dffe33.q, dffe32.q, dffe31.q, dffe30.q, dffe29.q, dffe28.q, dffe27.q, dffe26.q, dffe25.q, dffe24.q, dffe23.q, dffe22.q, dffe21.q, dffe20.q, dffe19.q, dffe18.q, dffe17.q, dffe16.q, dffe15.q, dffe14.q, dffe13.q, dffe12.q, dffe11.q, dffe10.q, dffe9.q, dffe8.q, dffe7.q, dffe6.q, dffe5.q, dffe4.q, dffe3.q, dffe2.q, dffe1.q);
END;
--VALID FILE
